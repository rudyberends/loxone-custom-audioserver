name: Release and Docker Image Build

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
      exists: ${{ steps.check_release.outputs.exists }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Bump version based on commit messages
      id: ver
      uses: paulhatch/semantic-version@v5.4.0
      with:
          branch: main
          tag_prefix: "v"
          major_pattern: "major"
          minor_pattern: "minor"
          version_format: 'v${major}.${minor}.${patch}'
          bump_each_commit: true
          bump_each_commit_patch_pattern: "fix"

    - name: Update package.json version
      run: |
        jq --arg version "${{ steps.ver.outputs.version }}" '.version = $version' package.json > tmp.json && mv tmp.json package.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for existing release
      id: check_release
      run: |
        response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.ver.outputs.version }}")
        echo "Response: $response"
        if echo "$response" | grep -q '"id":'; then
          echo "Release already exists. Skipping release creation."
          echo "exists=true" >> $GITHUB_ENV
          echo "::set-output name=exists::true"
        else
          echo "Release does not exist."
          echo "exists=false" >> $GITHUB_ENV
          echo "::set-output name=exists::false"
        fi

    - name: Create Release
      if: ${{ steps.check_release.outputs.exists == 'false' }}
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.ver.outputs.version }}
        name: "Release ${{ steps.ver.outputs.version }}"

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.exists == 'false' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ needs.release.outputs.version }}
